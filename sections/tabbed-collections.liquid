{%- render 'section-spacing-collapsing' -%}

<style>
  {%- assign section_background = section.settings.background | default: settings.background -%}
  {%- assign card_background = section.settings.product_card_background | default: settings.product_card_background -%}
  {%- assign card_blends = false -%}

  {%- unless section_background != 'rgba(0,0,0,0)' and card_background != 'rgba(0,0,0,0)' and section_background != card_background -%}
    {%- assign card_blends = true -%}
  {%- endunless -%}

  #shopify-section-{{ section.id }} .product-list {
    --product-list-gap: {% if section.settings.stack_products and section.settings.products_per_row_mobile == '2' %}{% if card_blends %}var(--product-list-row-gap){% endif %} var(--spacing-2){% else %}var(--product-list-row-gap) var(--product-list-column-gap){% endif %};
    --product-list-items-per-row: {{ section.settings.products_per_row_mobile | times: 1 }};
    --product-list-carousel-item-width: 74vw;
    --product-list-grid: {% if section.settings.stack_products %}auto / repeat(var(--product-list-items-per-row), minmax(0, 1fr)){% else %}auto / auto-flow var(--product-list-carousel-item-width){% endif %};
  }

  @media screen and (min-width: 700px) {
    #shopify-section-{{ section.id }} .product-list {
      --product-list-gap: var(--product-list-row-gap) var(--product-list-column-gap);
      --product-list-items-per-row: 2;
      --product-list-carousel-item-width: 36vw;
    }
  }

  @media screen and (min-width: 1000px) {
    #shopify-section-{{ section.id }} .product-list {
      --product-list-items-per-row: 4;
      --product-list-carousel-item-width: calc(var(--container-inner-width) / 4 - (var(--product-list-column-gap) / 4 * 3));
    }
  }

  .tabs-wrapper {
    margin-bottom: var(--spacing-6);
  }

  .tabs-nav {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-2);
    margin-bottom: var(--spacing-8);
  }

  .tabs-nav__button {
    position: relative;
    padding: 12px 25px;
    border: 1px solid {{ section.settings.button_border_color | default: '#e0e0e0' }};
    border-radius: 50px;
    background: {{ section.settings.button_background_color | default: '#ffffff' }};
    cursor: pointer;
    font-weight: var(--text-font-weight-medium);
    transition: all 0.3s ease;
    font-size: 14px;
    color: #333;
    min-width: 120px;
    text-align: center;
  }

  .tabs-nav__button::after {
    display: none; /* 移除下划线 */
  }

  .tabs-nav__button.is-selected {
    color: #ffffff;
    background-color: {{ section.settings.button_active_background_color | default: '#0095d9' }}; /* 蓝色背景，与截图匹配 */
    border-color: {{ section.settings.button_active_border_color | default: '#0095d9' }};
    box-shadow: 0 2px 4px rgba(0, 149, 217, 0.2);
  }

  .tabs-nav__button:hover:not(.is-selected) {
    background-color: {{ section.settings.button_hover_background_color | default: '#f5f5f5' }};
    border-color: {{ section.settings.button_hover_border_color | default: '#d0d0d0' }};
  }

  .tab-panel {
    display: none;
  }

  .tab-panel.is-active {
    display: block;
  }

  
  #shopify-section-{{ section.id }} .tab-swiper-container {
    position: relative;
    width: 100%;
    overflow: hidden;
  }
  #shopify-section-{{ section.id }} .swiper-container {
    overflow: visible;
    z-index: 1;
  }

  #shopify-section-{{ section.id }} .swiper-slide {
    flex-shrink: 0;
    width: 100%;
    height: auto;
    position: relative;
    transition-property: transform;
  }

  @media screen and (min-width: 1000px) {
    #shopify-section-{{ section.id }} .swiper-slide {
      width: calc(25% - 15px);
    }
  }

  #shopify-section-{{ section.id }} .swiper-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: var(--spacing-4);
    gap: 10px;
  }

  #shopify-section-{{ section.id }} .swiper-button-prev,
  #shopify-section-{{ section.id }} .swiper-button-next {
    position: relative;
    top: auto;
    left: auto;
    right: auto;
    bottom: auto;
    margin: 0;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #fff;
    border: 1px solid rgba(0,0,0,0.1);
    color: #333;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  #shopify-section-{{ section.id }} .swiper-button-prev:hover,
  #shopify-section-{{ section.id }} .swiper-button-next:hover {
    background-color: rgba(0,0,0,0.05);
  }

  #shopify-section-{{ section.id }} .swiper-button-prev:after,
  #shopify-section-{{ section.id }} .swiper-button-next:after {
    font-size: 14px;
    font-weight: bold;
  }
  #shopify-section-{{ section.id }} .swiper-pagination {
    position: relative;
    width: 60%;
    margin: 0 15px;
    display: flex;
    align-items: center;
  }

  #shopify-section-{{ section.id }} .swiper-pagination-progressbar {
    position: relative;
    width: 100%;
    height: 4px;
    background: rgba(0,0,0,0.1);
    border-radius: 2px;
    overflow: hidden;
  }

  #shopify-section-{{ section.id }} .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background: {{ section.settings.product_card_background_color }}; 
    border-radius: 2px;
    width: 0%; 
  }
  #shopify-section-{{ section.id }} .swiper-pagination-text {
    position: absolute;
    bottom: -20px;
    left: 0;
    width: 100%;
    text-align: center;
    font-size: 12px;
    color: #666;
  }
  @media screen and (max-width: 700px) {
    #shopify-section-{{ section.id }} .swiper-button-prev,
    #shopify-section-{{ section.id }} .swiper-button-next {
      position: relative;
      top: auto;
      left: auto;
      right: auto;
      bottom: auto;
      margin: 0;
      width: 60px;
      height: 40px;
      border-radius: 50%;
      background-color: #fff;
      border: 1px solid rgba(0,0,0,0.1);
      color: #333;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }
    .tabs-nav__button {
      min-width: unset;
  }
  }
 
</style>

<!-- Link Swiper's CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />

<div {% render 'section-properties' %}>
  <div class="section-stack">
    {%- render 'section-header', subheading: section.settings.subheading, heading: section.settings.title, heading_color: section.settings.heading_color, heading_gradient: section.settings.heading_gradient, content: section.settings.content -%}

    <div class="tabs-wrapper">
      {%- if section.blocks.size > 0 -%}
        <div class="tabs-nav" role="tablist">
          {%- for block in section.blocks -%}
            <button 
              id="tab-{{ block.id }}" 
              class="tabs-nav__button {% if forloop.first %}is-selected{% endif %}" 
              role="tab" 
              aria-selected="{% if forloop.first %}true{% else %}false{% endif %}" 
              aria-controls="panel-{{ block.id }}"
              data-tab-button
              {{ block.shopify_attributes }}
            >
              {{ block.settings.title | escape }}
            </button>
          {%- endfor -%}
        </div>

        {%- for block in section.blocks -%}
          <div 
            id="panel-{{ block.id }}" 
            class="tab-panel {% if forloop.first %}is-active{% endif %}" 
            role="tabpanel" 
            aria-labelledby="tab-{{ block.id }}"
            data-tab-panel
          >
            {%- assign collection = collections[block.settings.collection] -%}
            <div class="tab-swiper-container" data-swiper-container="{{ block.id }}">
              <div class="swiper" id="swiper-{{ block.id }}">
                <div class="swiper-wrapper">
                  {%- if collection.products.size > 0 -%}
                    {%- for product in collection.products -%}
                      <div class="swiper-slide gk-recommend-prod-slide-inner-box">
                        {%- render 'product-card', product: product, stacked: section.settings.stack_products, position: forloop.index, background: section.settings.product_card_background, text_color: section.settings.product_card_text_color, show_badges: true -%}
                      </div>
                    {%- endfor -%}
                  {%- else -%}
                    {%- for i in (1..4) -%}
                      <div class="swiper-slide gk-recommend-prod-slide-inner-box">
                        {%- capture placeholder_image -%}product-{% cycle '1', '2', '3', '4', '5', '6' %}{%- endcapture -%}
                        {%- render 'product-card-placeholder', stacked: section.settings.stack_products, placeholder_image: placeholder_image, background: section.settings.product_card_background, text_color: section.settings.product_card_text_color, text_alignment: settings.product_info_alignment -%}
                      </div>
                    {%- endfor -%}
                  {%- endif -%}
                </div>
              </div>
              
              {%- if collection.products.size > 4 -%}
                <div class="swiper-controls">
                  <div class="swiper-pagination" id="swiper-pagination-{{ block.id }}">
                    <div class="swiper-pagination-progressbar">
                      <div class="swiper-pagination-progressbar-fill"></div>
                    </div>
                    <div class="swiper-pagination-text" id="swiper-pagination-text-{{ block.id }}"></div>
                  </div>
                  <div class="swiper-button-prev" id="swiper-prev-{{ block.id }}"></div>
                  <div class="swiper-button-next" id="swiper-next-{{ block.id }}"></div>
                </div>
              {%- endif -%}
            </div>
          </div>
        {%- endfor -%}
      {%- endif -%}
    </div>
  </div>
</div>

<!-- Swiper JS -->
<script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tabbedCollections = document.querySelectorAll('.shopify-section--tabbed-collections');
    
    const equalizeProductTitles = (panelId) => {
      const panel = document.getElementById(panelId);
      if (!panel) return;
      
      const resetElements = panel.querySelectorAll('.product-item__title, .product-card__title, .product-title, h3, .title, .rating-with-text, .gk-recommend-prod-slide-inner-box, .bg-custom.text-custom');
      resetElements.forEach(el => {
        el.style.height = 'auto';
      });
      
      void panel.offsetHeight;
      
      const productTitles = panel.querySelectorAll('.product-item__title');
      if (productTitles.length > 0) {
        equalizeHeights(productTitles);
      }

      const alternativeTitles = panel.querySelectorAll('.product-card__title, .product-title, h3, .title');
      if (alternativeTitles.length > 0) {
        equalizeHeights(alternativeTitles);
      }

      const ratingWithText = panel.querySelectorAll('.rating-with-text');
      if (ratingWithText.length > 0) {
        equalizeHeights(ratingWithText);
      }
      
      const bgCustomTextCustomElements = panel.querySelectorAll('.bg-custom.text-custom');
      if (bgCustomTextCustomElements.length > 0) {
        equalizeHeights(bgCustomTextCustomElements);
      }
      const specificElements = panel.querySelectorAll('.swiper-slide .bg-custom.text-custom');
      if (specificElements.length > 0) {
        equalizeHeights(specificElements);
      }
      const productCards = panel.querySelectorAll('.gk-recommend-prod-slide-inner-box');
      if (productCards.length > 0) {
        equalizeHeights(productCards);
      }
    };
    
    const equalizeHeights = (elements) => {
      if (!elements || elements.length <= 1) return;

      elements.forEach(el => {
        el.style.height = 'auto';
      });
      
      let maxHeight = 0;
      elements.forEach(el => {
        const height = el.getBoundingClientRect().height;
        if (height > maxHeight) {
          maxHeight = height;
        }
      });
      
      if (maxHeight > 0) {
        elements.forEach(el => {
          el.style.height = `${maxHeight}px`;
        });
      }
    };
    
    const initializeAllSwipers = (container) => {
      const swiperContainers = container.querySelectorAll('[data-swiper-container]');
      swiperContainers.forEach(swiperContainer => {
        const blockId = swiperContainer.getAttribute('data-swiper-container');
        initializeSwiperForPanel(blockId);
      });
    };
    
    const getCurrentSlidesPerView = (swiper) => {
      if (!swiper || !swiper.params || !swiper.params.breakpoints) {
        return 4;
      }
      
      const windowWidth = window.innerWidth;
      const breakpoints = swiper.params.breakpoints;
      let slidesPerView = 4;
      
      Object.keys(breakpoints)
        .sort((a, b) => parseInt(a) - parseInt(b))
        .forEach(width => {
          if (windowWidth >= parseInt(width)) {
            slidesPerView = breakpoints[width].slidesPerView;
          }
        });
      
      return slidesPerView;
    };

    const updatePagination = (swiper, blockId, productsCount) => {
      if (productsCount <= 4) return;
      
      const slidesPerView = getCurrentSlidesPerView(swiper);
      
      const totalPages = Math.ceil(productsCount / slidesPerView);
      const currentPage = Math.min(Math.floor(swiper.activeIndex / slidesPerView) + 1, totalPages);
      
      const paginationText = document.getElementById(`swiper-pagination-text-${blockId}`);
      if (paginationText) {
        paginationText.textContent = `${currentPage} / ${totalPages}`;
      }
      
      const progressBar = document.querySelector(`#swiper-pagination-${blockId} .swiper-pagination-progressbar-fill`);
      if (progressBar) {
        let progressPercent;
        
        if (productsCount <= slidesPerView) {
          progressPercent = 100;
        } else {
          const visiblePercent = (slidesPerView / productsCount) * 100;
          const maxScrollPosition = productsCount - slidesPerView;
          const scrollProgress = (swiper.activeIndex / maxScrollPosition) * (100 - visiblePercent);
          progressPercent = visiblePercent + scrollProgress;
        }
        
        progressBar.style.width = `${progressPercent}%`;
      }
    };
    
    const initializeSwiperForPanel = (blockId) => {
      const swiperElement = document.getElementById(`swiper-${blockId}`);
      const panel = document.getElementById(`panel-${blockId}`);
      
      if (!swiperElement || !panel) return;
      
      const productsCount = panel.querySelectorAll('.swiper-slide').length;
      
      try {
        if (swiperElement.swiper) {
          swiperElement.swiper.destroy(true, true);
        }
        
        const swiperConfig = {
          slidesPerView: 1,
          spaceBetween: 16,
          watchOverflow: true,
          observer: true,
          observeParents: true,
          resistance: true,
          resistanceRatio: 0.85,
          speed: 400,
          autoplay: false,
          loop: false,
          touchReleaseOnEdges: true,
          breakpoints: {
            320: {
              slidesPerView: 1.2,
              spaceBetween: 10
            },
            480: {
              slidesPerView: 1.2,
              spaceBetween: 16
            },
            768: {
              slidesPerView: 3,
              spaceBetween: 20
            },
            1000: {
              slidesPerView: 4,
              spaceBetween: 20
            }
          },
          on: {
            init: function() {
              setTimeout(() => {
                equalizeProductTitles(`panel-${blockId}`);
                
                const allElements = document.querySelectorAll(`#panel-${blockId} .bg-custom.text-custom`);
                if (allElements.length > 0) {
                  equalizeHeights(allElements);
                }
                
                if (productsCount > 4) {
                  const progressBar = document.querySelector(`#swiper-pagination-${blockId} .swiper-pagination-progressbar-fill`);
                  const paginationText = document.getElementById(`swiper-pagination-text-${blockId}`);
                  
                  const slidesPerView = getCurrentSlidesPerView(this);
                  const totalPages = Math.ceil(productsCount / slidesPerView);
                  
                  if (paginationText) {
                    paginationText.textContent = `1 / ${totalPages}`;
                  }
                  
                  if (progressBar) {
                    const visiblePercent = (slidesPerView / productsCount) * 100;
                    progressBar.style.width = `${visiblePercent}%`;
                    console.log(`初始化设置进度条为${visiblePercent}%`);
                  } else {
                    console.log('进度条元素未找到');
                  }
                }
              }, 100);
            },
            slideChange: function() {
              updatePagination(this, blockId, productsCount);
              equalizeProductTitles(`panel-${blockId}`);
              
              setTimeout(() => {
                const allElements = document.querySelectorAll(`#panel-${blockId} .bg-custom.text-custom`);
                if (allElements.length > 0) {
                  equalizeHeights(allElements);
                }
              }, 100);
            }
          }
        };
        
        if (productsCount > 4) {
          swiperConfig.navigation = {
            nextEl: `#swiper-next-${blockId}`,
            prevEl: `#swiper-prev-${blockId}`,
          };
          
          swiperConfig.pagination = {
            el: `#swiper-pagination-${blockId}`,
            type: 'progressbar'
          };
        } else {
          const controls = panel.querySelector('.swiper-controls');
          if (controls) {
            controls.style.display = 'none';
          }
        }
        
        new Swiper(`#swiper-${blockId}`, swiperConfig);
      } catch (e) {
      }
    };
    
    const updateSwiperForPanel = (panel) => {
      if (!panel) return;
      
      const blockId = panel.id.replace('panel-', '');
      const swiperElement = document.getElementById(`swiper-${blockId}`);
      
      if (swiperElement && swiperElement.swiper) {
        swiperElement.swiper.update();
        const productsCount = panel.querySelectorAll('.swiper-slide').length;
        updatePagination(swiperElement.swiper, blockId, productsCount);
      } else {
        initializeSwiperForPanel(blockId);
      }
    };
    
    const setupImageLoadListeners = (panelId) => {
      const panel = document.getElementById(panelId);
      if (!panel) return Promise.resolve();
      
      const images = panel.querySelectorAll('img');
      if (images.length === 0) {
        return Promise.resolve();
      }
      
      const imagePromises = Array.from(images).map(img => {
        return new Promise(resolve => {
          if (img.complete) {
            resolve();
          } else {
            img.onload = () => resolve();
            img.onerror = () => resolve();
          }
        });
      });
      
      return Promise.all(imagePromises);
    };

    const forceUpdateProgressBar = (swiper, blockId, currentPage, totalPages) => {
      if (!swiper || !blockId) return;
      
      const panel = document.getElementById(`panel-${blockId}`);
      if (!panel) {
        return;
      }
      
      const productsCount = panel.querySelectorAll('.swiper-slide').length;
      const slidesPerView = getCurrentSlidesPerView(swiper);
      
      const progressBarFill = document.querySelector(`#swiper-pagination-${blockId} .swiper-pagination-progressbar-fill`);
      const paginationText = document.getElementById(`swiper-pagination-text-${blockId}`);
      
      if (paginationText) {
        paginationText.textContent = `${currentPage} / ${totalPages}`;
      }
      
      if (progressBarFill) {
        if (productsCount <= slidesPerView) {
          progressBarFill.style.width = '100%';
        } else {
          const visiblePercent = (slidesPerView / productsCount) * 100;
          progressBarFill.style.width = `${visiblePercent}%`;
        }
      }
    };
    
    const handleTabAndImageLoad = (tabId, panelId) => {
      const tab = document.getElementById(tabId);
      const panel = document.getElementById(panelId);
      if (!tab || !panel) return;
      
      document.querySelectorAll('[role="tab"]').forEach(t => {
        t.setAttribute('aria-selected', 'false');
        t.classList.remove('is-selected');
      });
      tab.setAttribute('aria-selected', 'true');
      tab.classList.add('is-selected');
      
      document.querySelectorAll('[role="tabpanel"]').forEach(p => {
        p.classList.remove('is-active');
      });
      panel.classList.add('is-active');
      
      const blockId = panelId.replace('panel-', '');
      const swiperElement = document.getElementById(`swiper-${blockId}`);
      
      // 先销毁已有的Swiper实例，确保完全重新初始化
      if (swiperElement && swiperElement.swiper) {
        swiperElement.swiper.destroy(true, true);
      }
      
      // 强制重新初始化Swiper
      initializeSwiperForPanel(blockId);
      
      // 等待所有图片加载完成
      setupImageLoadListeners(panelId).then(() => {
        // 使用多个时间点的检查，确保在DOM更新后正确应用样式
        const applyStyles = () => {
          // 强制均衡所有元素高度
          const productCards = panel.querySelectorAll('.gk-recommend-prod-slide-inner-box');
          if (productCards.length > 0) {
            equalizeHeights(productCards);
          }
          
          equalizeProductTitles(panelId);
          
          const allPossibleElements = [
            ...panel.querySelectorAll('.bg-custom.text-custom'),
            ...panel.querySelectorAll('.swiper-slide .bg-custom.text-custom'),
            ...panel.querySelectorAll('.gk-recommend-prod-slide-inner-box')
          ];
          
          if (allPossibleElements.length > 0) {
            equalizeHeights(allPossibleElements);
          }
          
          // 强制更新Swiper和进度条
          const productsCount = panel.querySelectorAll('.swiper-slide').length;
          if (swiperElement && swiperElement.swiper) {
            // 触发Swiper的重新计算尺寸
            swiperElement.swiper.updateSize();
            swiperElement.swiper.updateSlides();
            swiperElement.swiper.updateProgress();
            
            // 强制更新进度条
            if (productsCount > 4) {
              const slidesPerView = getCurrentSlidesPerView(swiperElement.swiper);
              const totalPages = Math.ceil(productsCount / slidesPerView);
              
              const progressBar = document.querySelector(`#swiper-pagination-${blockId} .swiper-pagination-progressbar-fill`);
              const paginationText = document.getElementById(`swiper-pagination-text-${blockId}`);
              
              if (paginationText) {
                paginationText.textContent = `1 / ${totalPages}`;
              }
              
              if (progressBar) {
                const visiblePercent = (slidesPerView / productsCount) * 100;
                progressBar.style.width = `${visiblePercent}%`;
                
                // 确保进度条是可见的
                progressBar.style.display = 'block';
              }
            }
          }
        };
        
        // 在多个时间点应用样式，确保在DOM完全更新后能正确应用
        applyStyles(); // 立即应用一次
        setTimeout(applyStyles, 50); // 50ms后应用
        setTimeout(applyStyles, 200); // 200ms后应用
        setTimeout(applyStyles, 500); // 500ms后应用，确保DOM完全更新
      });
    };
    
    tabbedCollections.forEach(container => {
      const tabs = container.querySelectorAll('[role="tab"]');
      
      // 初始化所有Swiper
      initializeAllSwipers(container);
      
      // 设置标签点击处理程序
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const tabId = tab.id;
          const panelId = tab.getAttribute('aria-controls');
          
          handleTabAndImageLoad(tabId, panelId);
        });
      });
      
      // 单独处理第一个标签的初始化
      const firstTab = container.querySelector('[role="tab"].is-selected');
      if (firstTab) {
        const panelId = firstTab.getAttribute('aria-controls');
        const panel = document.getElementById(panelId);
        if (panel) {
          panel.classList.add('is-active');
          
          const blockId = panelId.replace('panel-', '');
          const swiperElement = document.getElementById(`swiper-${blockId}`);
          
          // 初始化第一个标签内容
          setupImageLoadListeners(panelId).then(() => {
            const applyFirstTabStyles = () => {
              // 强制均衡所有可能的元素高度
              equalizeProductTitles(panelId);
              
              const allElements = [
                ...panel.querySelectorAll('.bg-custom.text-custom'),
                ...panel.querySelectorAll('.swiper-slide .bg-custom.text-custom'),
                ...panel.querySelectorAll('.gk-recommend-prod-slide-inner-box')
              ];
              
              if (allElements.length > 0) {
                equalizeHeights(allElements);
              }
              
              // 更新Swiper和进度条
              if (swiperElement && swiperElement.swiper) {
                // 触发完整更新
                swiperElement.swiper.updateSize();
                swiperElement.swiper.updateSlides();
                swiperElement.swiper.updateProgress();
                
                const productsCount = panel.querySelectorAll('.swiper-slide').length;
                if (productsCount > 4) {
                  const slidesPerView = getCurrentSlidesPerView(swiperElement.swiper);
                  const totalPages = Math.ceil(productsCount / slidesPerView);
                  
                  const progressBar = document.querySelector(`#swiper-pagination-${blockId} .swiper-pagination-progressbar-fill`);
                  const paginationText = document.getElementById(`swiper-pagination-text-${blockId}`);
                  
                  if (paginationText) {
                    paginationText.textContent = `1 / ${totalPages}`;
                  }
                  
                  if (progressBar) {
                    const visiblePercent = (slidesPerView / productsCount) * 100;
                    progressBar.style.width = `${visiblePercent}%`;
                    progressBar.style.display = 'block';
                  }
                }
              }
            };
            
            // 多次应用，确保在所有DOM更新后生效
            applyFirstTabStyles();
            setTimeout(applyFirstTabStyles, 50);
            setTimeout(applyFirstTabStyles, 200);
            setTimeout(applyFirstTabStyles, 500);
          });
        }
      }
      
      // 确保在窗口加载完成时，所有tab内容都已正确初始化
      window.addEventListener('load', () => {
        const activePanel = container.querySelector('.tab-panel.is-active');
        if (activePanel) {
          const blockId = activePanel.id.replace('panel-', '');
          const swiperElement = document.getElementById(`swiper-${blockId}`);
          
          if (swiperElement && swiperElement.swiper) {
            swiperElement.swiper.updateSize();
            swiperElement.swiper.updateSlides();
            
            const productsCount = activePanel.querySelectorAll('.swiper-slide').length;
            if (productsCount > 4) {
              updatePagination(swiperElement.swiper, blockId, productsCount);
            }
            
            // 再次均衡高度
            equalizeProductTitles(activePanel.id);
            
            const allElements = activePanel.querySelectorAll('.gk-recommend-prod-slide-inner-box');
            if (allElements.length > 0) {
              equalizeHeights(allElements);
            }
          }
        }
      });
    });
    
    // 窗口调整大小时也更新
    window.addEventListener('resize', () => {
      const activePanel = document.querySelector('.tab-panel.is-active');
      if (activePanel) {
        const blockId = activePanel.id.replace('panel-', '');
        const swiperElement = document.getElementById(`swiper-${blockId}`);
        
        // 首先均衡高度
        equalizeProductTitles(activePanel.id);
        
        const allElements = [
          ...activePanel.querySelectorAll('.bg-custom.text-custom'),
          ...activePanel.querySelectorAll('.swiper-slide .bg-custom.text-custom'),
          ...activePanel.querySelectorAll('.gk-recommend-prod-slide-inner-box')
        ];
        
        if (allElements.length > 0) {
          equalizeHeights(allElements);
        }
        
        // 然后更新Swiper和进度条
        if (swiperElement && swiperElement.swiper) {
          // 完整更新Swiper
          swiperElement.swiper.updateSize();
          swiperElement.swiper.updateSlides();
          swiperElement.swiper.updateProgress();
          
          const productsCount = activePanel.querySelectorAll('.swiper-slide').length;
          if (productsCount > 4) {
            updatePagination(swiperElement.swiper, blockId, productsCount);
          }
        }
      }
    });
  });
</script>

{% schema %}
{
  "name": "Tabbed collections",
  "class": "shopify-section--tabbed-collections",
  "tag": "section",
  "disabled_on": {
    "templates": ["password"],
    "groups": ["header", "custom.overlay"]
  },
  "settings": [
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "Full width",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "stack_products",
      "label": "Stack products",
      "default": true
    },

    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "Products per row (mobile)",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Shop by category"
    },
    {
      "type": "richtext",
      "id": "content",
      "label": "Content"
    },
    {
      "type": "header",
      "content": "Tab button style",
      "info": "Customize the appearance of tab buttons"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_border_color",
      "label": "Border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "button_active_background_color",
      "label": "Active background color",
      "default": "#0095d9"
    },
    {
      "type": "color",
      "id": "button_active_border_color",
      "label": "Active border color",
      "default": "#0095d9"
    },
    {
      "type": "color",
      "id": "button_hover_background_color",
      "label": "Hover background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "button_hover_border_color",
      "label": "Hover border color",
      "default": "#d0d0d0"
    },
    {
      "type": "header",
      "content": "Colors",
      "info": "Gradient replaces solid colors when set."
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background"
    },
    {
      "type": "color_background",
      "id": "background_gradient",
      "label": "Background gradient"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color"
    },
    {
      "type": "color_background",
      "id": "heading_gradient",
      "label": "Heading gradient"
    },
    {
      "type": "color",
      "id": "product_card_background",
      "label": "Product card background"
    },
    {
      "type": "color",
      "id": "product_card_text_color",
      "label": "Product card text"
    },
    {
      "type": "color",
      "id": "product_card_background_color",
      "label": "progressbar background color",
      "default": "#0095d9"
    }
  ],
  "blocks": [
    {
      "type": "collection_tab",
      "name": "Collection Tab",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "Category"
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Tabbed collections",
      "blocks": [
        {
          "type": "collection_tab",
          "settings": {
            "title": "Featured"
          }
        },
        {
          "type": "collection_tab",
          "settings": {
            "title": "New arrivals"
          }
        },
        {
          "type": "collection_tab",
          "settings": {
            "title": "Best sellers"
          }
        }
      ]
    }
  ]
}
{% endschema %}
