<link rel="stylesheet" href="{{ 'bulletin-borad.css' | asset_url }}">
<link rel="stylesheet" href="{{ 'component-countdown.css' | asset_url }}">
{%- style -%}
  #shopify-section-{{ section.id }}  {

    background-color: {{ section.settings.background_color }};
    color:  {{ section.settings.text_color }};
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 999;
  }
  span.cuntdown__sep__colon_line{
    color: {{ section.settings.countdown_dotColor }};
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}
<style>
  .flex{
    display: flex;
  }
  .align-center{
    align-items: center;
  }
  .countdown__part.hidden{
    display: none;
  }
  .justify-center{
    justify-content: center;
  }
  .bulletin-bar-container-{{ section.id }} .bulletin-bar__main {
    position: relative;
    overflow: hidden;

    font-size: 16px;
    padding: 20px 0;
  }

  .bulletin-bar-container-{{ section.id }} .bar__main-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    transform: translateY(100%);
    opacity: 0;
    transition: transform 0.5s ease-in-out, opacity 0.5s ease-in-out;
    gap: 1rem;
  }
  .bulletin-bar-container-{{ section.id }} .bar__main-item a{
    text-decoration: none;
    cursor: pointer;
  }
  .bulletin-bar-container-{{ section.id }} .bar__main-item a:hover {
    text-decoration: underline;
  }
  .bulletin-bar-container-{{ section.id }} .bar__main-item.active {
    transform: translateY(0);
    opacity: 1;
  }
  .bulletin-bar-container-{{ section.id }} .bar__main-item.exit {
    transform: translateY(-100%);
    opacity: 0;
  }
  
  /* Show desktop text on larger screens, hide mobile text */
  .mobile-text {
    display: none;
  }
  .desktop-text {
    display: inline;
  }
  
  @media (max-width: 768px) {
    /* Hide desktop text on mobile screens, show mobile text */
    .mobile-text {
      display: inline;
    }
    .desktop-text {
      display: none;
    }
    
    .product__countdown {
      padding: 1rem 10px;
    }
    .bulletin-bar-container-{{ section.id }} .bar__main-item {
      gap: 0rem;
    }
    .bulletin-bar-container-{{ section.id }} .bulletin-bar__main {
      position: relative;
      overflow: hidden;
      font-size: 16px;
      padding: 20px 0;
    }
  }
</style>
<div class="bulletin-bar-container-{{ section.id }} {{ section.settings.content_width }}">
  <div class="bulletin-bar__main w100 bar__main-container">
    {%- for block in section.blocks -%}
      {%- case block.type -%}
        {%- when 'bar_item' -%}
          <div
            class="bar__main-item flex align-center justify-center {% if forloop.index == 1 %} active {%- endif -%}"
            data-index="{{ forloop.index }}"
          >
            <a class="bulletin-bar__content-text flex align-center justify-center" href="{{ block.settings.link }}">
              <span class="bar__content__text desktop-text">{% if block.settings.title.size > section.settings.desktop_title_length %}{{ block.settings.title | truncate: section.settings.desktop_title_length, '...' }}{% else %}{{ block.settings.title }}{% endif %}</span>
              <span class="bar__content__text mobile-text">{% if block.settings.title.size > section.settings.mobile_title_length %}{{ block.settings.title | truncate: section.settings.mobile_title_length, '...' }}{% else %}{{ block.settings.title }}{% endif %}</span>
            </a>
            <div class="bulletin-bar__content-countdown flex align-center justify-center">
              {% comment %} <span>Ends in </span> {% endcomment %}
              <count-down
                {% if is_countdown_list %}
                  data-list="{% for value in final_countdown_value %}{{ value | date: '%Y-%m-%d %H:%M:%S%z' }}{% unless forloop.last %},{% endunless %}{% endfor %}"
                {% else %}
                  data-endtime="{{ block.settings.countdown_time }}"
                {% endif %}
                data-timezone="{{ 'now' | date: '%z' }}"
                data-expired-msg="{{ block.settings.expiration_message | escape }}"
                class="product__info-box flex product__countdown countdown-simple"
                data-has-own-tpl="true"
                {{ block.shopify_attributes }}
              >
                <div class="countdown-simple__inner flex align-center flex-wrap">
                  {%- render 'countdown-tpl-simple', bgcColor: block.settings.countdown_bgc_color, dotColor: block.settings.countdown_dotColor, id: block.id -%}
                </div>
              </count-down>
            </div>
          </div>
      {%- endcase -%}
    {%- endfor -%}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {

    
    const container = document.querySelector('.bulletin-bar-container-{{ section.id }}');
    const barMainElement = document.querySelector('.bulletin-bar__main');
    const barHeight = barMainElement ? barMainElement.offsetHeight : 0;
    
    // Store the height value
    window.bulletinBarHeight = barHeight;
    console.log('Bulletin Bar Height:', barHeight);
    
    // Apply top margin to the header wrapper if bulletin bar exists
    const headerWrapper = document.querySelector('.header__wrapper.custom-header-wrapper');
    if (barMainElement && headerWrapper) {
      headerWrapper.style.top = barHeight + 'px';
    }
    
    // Apply margin-top to shopify-section--slideshow for mobile devices
    const isMobile = window.innerWidth < 768;
    const slideshowSection = document.querySelector('.shopify-section--slideshow');
    if (isMobile && barMainElement && slideshowSection) {
      slideshowSection.style.marginTop = barHeight + 'px';
    }
    
    // Handle window resize events for mobile responsiveness
    window.addEventListener('resize', function() {
      const currentIsMobile = window.innerWidth < 768;
      if (currentIsMobile && barMainElement && slideshowSection) {
        slideshowSection.style.marginTop = barHeight + 'px';
      } else if (slideshowSection) {
        slideshowSection.style.marginTop = '';
      }
    });
    
    const items = container ? container.querySelectorAll('.bar__main-item') : [];

    if (items.length <= 1) return;

    let currentIndex = 0;
    items[currentIndex].classList.add('active');
    let interval; //瀛樺偍瀹氭椂鍣?

    function nextItem() {
      const currentItem = items[currentIndex];
      currentItem.classList.remove('active');
      currentItem.classList.add('exit');

      currentIndex = (currentIndex + 1) % items.length;
      const nextItem = items[currentIndex];
      nextItem.classList.add('active');

      setTimeout(() => {
        currentItem.classList.remove('exit');
      }, 500);
    }

    function startInterval() {
      interval = setInterval(nextItem, {{ section.settings.rotation_interval | default: 3000 }});
    }

    startInterval();

    // 榧犳爣鎮仠鏆傚仠
    container.addEventListener('mouseenter', () => {
      clearInterval(interval);
    });

    container.addEventListener('mouseleave', () => {
      clearInterval(interval); // 闃叉閲嶅瀹氭椂鍣?
      startInterval();
    });
  });
</script>
<script>if (!customElements.get('count-down')) {
  customElements.define('count-down', class Countdown extends HTMLElement {
    constructor() {
      super();

      // Hide countdown immediately on construction before any content is visible
      this.style.display = 'none';

      if (!this.dataset.hasOwnTpl) {
        this.appendChild(document.getElementById('countdown-tpl').content.firstElementChild.cloneNode(true));
      }
      if (this.dataset.endtime) {
        this.initSingleCountdown();
      } else if (this.dataset.list) {
        this.initCountdownInList();
      } else {
        this.initFail();
      }
    }

    initSingleCountdown() {
      const pattern1 = /^\d{4}-\d{2}-\d{2}$/;
      const pattern2 = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$/;
      const pattern3 = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}(\:\d{2}|)(\+|-)\d{4}/;
      if (pattern1.test(this.dataset.endtime) || pattern2.test(this.dataset.endtime) || pattern3.test(this.dataset.endtime)) {
        var finalDate = this.dataset.endtime;
        if (pattern1.test(this.dataset.endtime)) {
          finalDate += ' 00:00:00' + this.dataset.timezone;
        } else if (pattern2.test(this.dataset.endtime)) {
          finalDate += this.dataset.timezone;
        }
        this.countDownDate = new Date(finalDate).getTime();
        this.initElements();
        this.interval = setInterval(this.run.bind(this), 1000);
      } else {
        this.initFail();
      }
    }

    initCountdownInList() {
      const pattern = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}(\:\d{2}|)(\+|-)\d{4}/;
      const dataList = this.dataset.list.split(',');
      const now = new Date();
      let min;
      dataList.forEach(value => {
        if (pattern.test(value)) {
          let countdownDate = new Date(value);
          if (countdownDate > now) {
            if (!min || countdownDate <= min) {
              min = countdownDate;
            }
          }
        }
      });
      if (min) {
        this.countDownDate = min.getTime();
        this.initElements();
        this.interval = setInterval(this.run.bind(this), 1000);
      } else {
        this.initFail();
      }
    }

    initElements() {
      this.daysElement = this.querySelector('.countdown__days__value');
      this.hoursElement = this.querySelector('.countdown__hours__value');
      this.minutesElement = this.querySelector('.countdown__minutes__value');
      this.secondsElement = this.querySelector('.countdown__seconds__value');
      
      // Run calculation once before showing to ensure proper initial state
      this.runOnce();
    }

    runOnce() {
      const now = new Date().getTime();
      const distance = this.countDownDate - now;
      
      // If countdown is already expired, hide it completely
      if (distance < 0) {
        // Hide the countdown element completely
        if (this.dataset.expiredMsg) {
          this.showMessage(this.dataset.expiredMsg);
        } else {
          this.style.display = 'none';
        }
        clearInterval(this.interval);
        return;
      }
      
      const daysNumber = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hoursNumber = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutesNumber = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const secondsNumber = Math.floor((distance % (1000 * 60)) / 1000);
      
      // Set initial values before showing
      const daysParent = this.daysElement?.closest('.countdown__days');
      if (daysNumber <= 0) {
        if (daysParent) {
          daysParent.classList.add('hidden');
        } else if (this.daysElement?.parentElement) {
          this.daysElement.parentElement.classList.add('hidden');
        }
      } else if (this.daysElement) {
        this.daysElement.textContent = daysNumber;
      }

      const hoursParent = this.hoursElement?.closest('.countdown__hours');
      if (hoursNumber <= 0 && daysNumber <= 0) {
        if (hoursParent) {
          hoursParent.classList.add('hidden');
        } else if (this.hoursElement?.parentElement) {
          this.hoursElement.parentElement.classList.add('hidden');
        }
      } else if (this.hoursElement) {
        this.hoursElement.textContent = hoursNumber;
      }

      if (this.minutesElement) {
        this.minutesElement.textContent = minutesNumber;
      }
      
      if (this.secondsElement) {
        this.secondsElement.textContent = secondsNumber;
      }
      
      // Show the countdown after initial setup
      this.style.display = '';
    }

    run() {
      const now = new Date().getTime();
      const distance = this.countDownDate - now;
      
      // If countdown is expired, hide it completely and clear interval
      if (distance < 0) {
        clearInterval(this.interval);
        if (this.dataset.expiredMsg) {
          this.showMessage(this.dataset.expiredMsg);
          this.classList.add('expired');
        } else {
          this.style.display = 'none';
        }
        return;
      }
      
      const daysNumber = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hoursNumber = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutesNumber = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const secondsNumber = Math.floor((distance % (1000 * 60)) / 1000);
      
      const daysParent = this.daysElement?.closest('.countdown__days');
      if (daysNumber <= 0) {
        if (daysParent) {
          daysParent.classList.add('hidden');
        } else {
          this.daysElement.parentElement.classList.add('hidden');
        }
      } else {
        if (daysParent) {
          daysParent.classList.remove('hidden');
        } else {
          this.daysElement.parentElement.classList.remove('hidden');
        }
        this.daysElement.textContent = daysNumber;
      }

      const hoursParent = this.hoursElement?.closest('.countdown__hours');
      if (hoursNumber <= 0 && daysNumber <= 0) {
        if (hoursParent) {
          hoursParent.classList.add('hidden');
        } else {
          this.hoursElement.parentElement.classList.add('hidden');
        }
      } else {
        if (hoursParent) {
          hoursParent.classList.remove('hidden');
        } else {
          this.hoursElement.parentElement.classList.remove('hidden');
        }
        this.hoursElement.textContent = hoursNumber;
      }

      this.minutesElement.textContent = minutesNumber;
      this.secondsElement.textContent = secondsNumber;
    }

    showMessage(msg) {
      this.querySelectorAll(':scope > *').forEach((ele) => ele.remove());
      const node = document.createTextNode(msg);
      this.appendChild(node);
    }

    initFail() {
      if (Shopify.designMode) {
        this.showMessage(window.accessibilityStrings.countdownErrorMsg);
      } else {
        this.remove();
      }
    }
  });
}</script>
{% schema %}
{
  "name": "Bulletin Bar",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "Content Width"
    },
    {
      "type": "select",
      "id": "content_width",
      "label": "Content Width",
      "options": [
        {
          "value": "w100",
          "label": "Full width"
        },
        {
          "value": "page-width",
          "label": "Grid"
        }
      ]
    },
    {
      "type": "range",
      "id": "rotation_interval",
      "min": 1000,
      "max": 9000,
      "step": 500,
      "unit": "ms",
      "label": "Rotation Interval",
      "default": 3000
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color"
    },
    {
      "type": "color",
      "id": "countdown_dotColor",
      "label": "Countdown Background svg"
    },
    {
      "type": "range",
      "id": "desktop_title_length",
      "min": 20,
      "max": 50,
      "step": 5,
      "unit": "ch",
      "label": "Desktop Title Max Length",
      "default": 30
    },
    {
      "type": "range",
      "id": "mobile_title_length",
      "min": 10,
      "max": 30,
      "step": 5,
      "unit": "ch",
      "label": "Mobile Title Max Length",
      "default": 20
    }
  ],
  "blocks": [
    {
      "type": "bar_item",
      "name": "Bulletin Bar Item",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Bulletin Bar Title",
          "default": "Bulletin Bar Title"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Bulletin Bar Link"
        },
        
        {
          "type": "text",
          "id": "countdown_time",
          "label": "Countdown Time",
          "default": "2025-08-30"
        },
        {
          "type": "color",
          "id": "countdown_bgc_color",
          "label": "Countdown Background Color",
          "default": "#bd1c1c"
        }
       
      ]
    }
  ],
  "presets": [
    {
      "name": "Bulletin Bar"
    }
  ]
}
{% endschema %}
